version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: equiflex-postgres
    environment:
      POSTGRES_DB: equiflex
      POSTGRES_USER: equiflex_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-equiflex_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - equiflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U equiflex_user -d equiflex"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: equiflex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - equiflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Apache Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: equiflex-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - equiflex-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: equiflex-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - equiflex-network
    restart: unless-stopped

  # Trading Engine
  trading-engine:
    build:
      context: .
      target: engine
    container_name: equiflex-engine
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=${DB_PASSWORD:-equiflex_password}
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
      - ./models:/app/models
    networks:
      - equiflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/status')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Service
  api:
    build:
      context: .
      target: api
    container_name: equiflex-api
    depends_on:
      - postgres
      - redis
      - trading-engine
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PASSWORD=${DB_PASSWORD:-equiflex_password}
      - REDIS_HOST=redis
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
      - ./web:/app/web
    networks:
      - equiflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: equiflex-nginx
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    networks:
      - equiflex-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: equiflex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - equiflex-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: equiflex-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - equiflex-network
    restart: unless-stopped

  # ELK Stack for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: equiflex-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - equiflex-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: equiflex-logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./infrastructure/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - equiflex-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: equiflex-kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - equiflex-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  equiflex-network:
    driver: bridge